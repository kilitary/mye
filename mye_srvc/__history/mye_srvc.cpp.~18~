// ---------------------------------------------------------------------------
#include "mye_srvc.h"
#include "functions.h"
#include "srvc_main.h"
// ---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"

Tsrvc *srvc;
TSrvcThread *thr;

// ---------------------------------------------------------------------------
__fastcall Tsrvc::Tsrvc(TComponent *Owner):TService(Owner)
{
    deb("Tsrvc created");
}

TServiceController __fastcall Tsrvc::GetServiceController(void)
{
    return(TServiceController)ServiceController;
}

void __stdcall ServiceController(unsigned CtrlCode)
{
    srvc->Controller(CtrlCode);
}

void __fastcall Tsrvc::ServiceStart(TService *Sender, bool &Started)
{
    // MessageBox(NULL, "sdf","sdf",MB_OK);
    OutputDebugString("ServiceStart");
    HANDLE hUserToken = (HANDLE)0x1;

    hUserToken = get_user_token();

    if (hUserToken == 0)
         deb("failed to get token");

    int res = ImpersonateLoggedOnUser(hUserToken);
    if (res == 0)
        deb("ImpersonateLoggedOnUser: %s", fmterr());

    thr = new TSrvcThread(false);
    deb("service started");
    Started = true;
}
// ---------------------------------------------------------------------------

void __fastcall Tsrvc::ServiceStop(TService *Sender, bool &Stopped)
{
    thr->Terminate();
    Stopped = true;
}

// ---------------------------------------------------------------------------
void __fastcall Tsrvc::ServiceExecute(TService *Sender)
{
    while (!Terminated)
    {
        ServiceThread->ProcessRequests(true);
    }
}
// ---------------------------------------------------------------------------
